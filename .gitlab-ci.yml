default:
  # Official language image. Look for the different tagged releases at:
  # https://hub.docker.com/r/library/python/tags/
  image: python:3.7-buster

stages:
  - cleanup
  - bootstrap
  - ceph
  - openstack
  - post_deploy
  - test

.base_setup:
  tags:
    - docker-runner

before_script:
  # Setup and add SSH_PRIVATE_KEY to ssh agent
  - 'which ssh-agent || ( apt-get update -qqy && apt-get install openssh-client -qqy )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

cleanup:
  stage: cleanup
  extends:
    - .base_setup
  script:
    # Configure the networking and bridge for openstack.
    - for node in $NODES_PUBLIC_IP; do python3 deploy.py --sudo --scp -c "bootstrap_servers.sh" -n $node;done
    # Prepare a clean environment - cleanup servers to be used for deploy
    # Ensure there is no ceph and openstack deployment on the servers
    - python3 deploy.py --scp -c "cleanup.sh" --args "cleanup_master" -n $DEPLOY_NODE_IP
    - for node in $NODES_PUBLIC_IP; do python3 deploy.py --scp -c "cleanup.sh" --args "cleanup_nodes" -n $node;done
    # Restart the nodes to complete the cleanup
    - for node in $NODES_PUBLIC_IP; do python3 deploy.py --sudo -c "shutdown -r 1" -n $node;done
    # Verify that the servers are up and online.
    - for node in $NODES_PUBLIC_IP; do python3 deploy.py -c "echo Server is UP!" -n $node;done
 
bootstrap:openstack:
  stage: bootstrap
  extends:
    - .base_setup
  script:
    # Run bootstrap across the servers for installing the pre-reqs for openstack
    - python3 deploy.py --scp -c "bootstrap_openstack.sh" -n $DEPLOY_NODE_IP

deploy:ceph:
  stage: ceph
  extends:
    - .base_setup
  script:
    # Run bootstrap across the servers for installing the pre-reqs for CEPH
    - python3 deploy.py --sudo --scp -c "bootstrap_ceph.sh" --args "$DEPLOY_NODE_PRIVATE_IP" -n $DEPLOY_NODE_IP
    # Deploy ceph on target servers using cephadm
    # Configure kolla options for ceph
    - python3 deploy.py --sudo --scp -c "deploy_ceph.sh" -n $DEPLOY_NODE_IP

openstack:pull:
  stage: ceph
  extends:
    - .base_setup
  script:
    - python3 deploy.py -c "cd /opt/kolla; source venv/bin/activate; kolla-ansible -i multinode prechecks" -n $DEPLOY_NODE_IP
    - python3 deploy.py -c "cd /opt/kolla; source venv/bin/activate; kolla-ansible -i multinode pull" -n $DEPLOY_NODE_IP

deploy:openstack:
  stage: openstack
  extends:
    - .base_setup
  script:
    # Deploy openstack on target servers using kolla
    # 1. Run Kolla pre-setup
    # 2. Run Kolla deploy
    - python3 deploy.py --scp -c "deploy_openstack.sh" -n $DEPLOY_NODE_IP

post_deploy:setup:openstack:
  stage: post_deploy
  extends:
    - .base_setup
  script:
    # Setup the openstack cloud with public network, images, flavors etc.
    - python3 deploy.py --sudo --scp -c "day2_openstack.sh" -n $DEPLOY_NODE_IP

test:
  stage: test
  extends:
    - .base_setup
  script:
    # Run refstack tests to ensure that the openstack deploy on target servers is functional
    - python3 deploy.py --scp -c "verifications-setup.sh" -n $DEPLOY_NODE_IP
    - python3 deploy.py --scp -c "refstack.sh" -n $DEPLOY_NODE_IP
    - python3 deploy.py --scp -c "tempest-stress.sh" -n $DEPLOY_NODE_IP
  #artifacts:
  #  paths:
  #    - /home/ubuntu/refstack-client/.tempest/.stestr/0.json
  #    - /home/ubuntu/refstack-client/.tempest/.stestr/0
