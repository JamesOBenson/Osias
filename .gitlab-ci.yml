default:
  # Official language image. Look for the different tagged releases at:
  # https://hub.docker.com/r/library/python/tags/
  image: python:3.7-buster

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'

stages:
  - reprovision_servers
  - bootstrap_networking
  - cleanup
  - reboot_servers
  - bootstrap_openstack
  - pre_deploy
  - deploy
  - post_deploy
  - test_setup
  - test_refstack
  - test_stress
  - test_rally

.base_setup:
  tags:
    - docker-runner

before_script:
  # Setup and add SSH_PRIVATE_KEY to ssh agent
  - 'which ssh-agent || ( apt-get update -qqy && apt-get install openssh-client -qqy )'
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - pip3 install toml timeout_decorator

reprovision_servers:
  stage: reprovision_servers
  extends:
    - .base_setup
  image: utsaics/maas:2.8
  script:
    - python3 deploy.py reprovision_servers --config "$MULTINODE" --MAAS_URL "$MAAS_URL" --MAAS_API_KEY "$MAAS_API_KEY"
  rules:
    - if: '$REPROVISION_SERVERS == "false"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'

bootstrap_networking:
  stage: bootstrap_networking
  extends:
    - .base_setup
  script:
    # Configure the networking and bridge for openstack.
    - python3 deploy.py bootstrap_networking --config "$MULTINODE"

cleanup:
  stage: cleanup
  extends:
    - .base_setup
  script:
    # Prepare a clean environment - cleanup servers to be used for deploy
    # Ensure there is no ceph and openstack deployment on the servers
    - python3 deploy.py cleanup --config "$MULTINODE"
  rules:
    - if: '$REPROVISION_SERVERS == "true"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'

reboot_servers:
  stage: reboot_servers
  extends:
    - .base_setup
  script:
    # Restart the nodes
    # Verify that the servers are up and online.
    - python3 deploy.py reboot_servers --config "$MULTINODE"
  rules:
    - if: '$REPROVISION_SERVERS == "true"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'


bootstrap:openstack:
  stage: bootstrap_openstack
  extends:
    - .base_setup
  script:
    # Run bootstrap across the servers for installing the pre-reqs for openstack
    - python3 deploy.py bootstrap_openstack --config "$MULTINODE"

ceph:deploy:
  stage: pre_deploy
  extends:
    - .base_setup
  script:
    # Run bootstrap across the servers for installing the pre-reqs for CEPH
    - python3 deploy.py bootstrap_ceph --config "$MULTINODE"
    # Deploy ceph on target servers using cephadm
    # Configure kolla options for ceph
    - python3 deploy.py deploy_ceph --config "$MULTINODE"

openstack:pull:
  stage: pre_deploy
  extends:
    - .base_setup
  retry: 2
  script:
    # Pull openstack kolla images
    - python3 deploy.py pre_deploy_openstack --config "$MULTINODE"

deploy:openstack:
  stage: deploy
  extends:
    - .base_setup
  script:
    # Deploy openstack on target servers using kolla
    # 1. Run Kolla pre-setup
    # 2. Run Kolla deploy
    - python3 deploy.py deploy_openstack --config "$MULTINODE"

post_deploy:openstack:
  stage: post_deploy
  extends:
    - .base_setup
  script:
    # Setup the openstack cloud with public network, images, flavors etc.
    - python3 deploy.py post_deploy_openstack --config "$MULTINODE"

test:setup:
  stage: test_setup
  extends:
    - .base_setup
  script:
    - python3 deploy.py test_setup --config "$MULTINODE"

test:refstack:
  stage: test_refstack
  extends:
    - .base_setup
  script:
    # Run refstack tests to ensure that the openstack deploy on target servers is functional
    - python3 deploy.py test_refstack --config "$MULTINODE"
  after_script:
    # Setup and add SSH_PRIVATE_KEY to ssh agent
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    # Copy over the test output files
    - python3 deploy.py copy_files --config "$MULTINODE" --file_path "/home/ubuntu/refstack-client/.tempest/.stestr/0*"
  allow_failure: true
  artifacts:
    paths:
      - ./0
      - ./0.json
    when: always

test:stress:
  stage: test_stress
  extends:
    - .base_setup
  script:
    - python3 deploy.py test_stress --config "$MULTINODE"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "master"'
      allow_failure: true

test:rally:
  stage: test_rally
  extends:
    - .base_setup
  script:
    # Run refstack tests to ensure that the openstack deploy on target servers is functional
    - python3 deploy.py test_rally --config "$MULTINODE"
  after_script:
    # Setup and add SSH_PRIVATE_KEY to ssh agent
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    # Copy over the test output files
    - python3 deploy.py copy_files --config "$MULTINODE" --file_path "/home/ubuntu/report.html
  allow_failure: true
  artifacts:
    paths:
      - ./report.html
    when: always
